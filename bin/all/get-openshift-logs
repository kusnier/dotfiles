#!/usr/bin/env pwsh

param (
    [string]$Pod,                # Name des Pods
    [string]$FilterLogLevel,     # Optional: Filter f端r Log-Level (z. B. "INFO", "ERROR")
    [string]$FilterLoggerName    # Optional: Filter f端r Logger-Namen (z. B. "service")
)

# Funktion zum K端rzen des Loggernamens
function Get-LoggerName {
    param (
        [string]$loggerName
    )

    # Splitte den LoggerName anhand des Punkts (.)
    $parts = $loggerName -split '\.'

    # Gib den letzten Teil zur端ck
    return $parts[-1]
}

# Funktion zum Abrufen der Logs
function Get-Openshift-Logs {
    param (
        [string]$pod,
        [string]$filterLogLevel,
        [string]$filterLoggerName
    )

    $processStartInfo = New-Object System.Diagnostics.ProcessStartInfo
    $processStartInfo.FileName = "oc"
    $processStartInfo.Arguments = "logs --tail=0 -f $pod"
    $processStartInfo.RedirectStandardOutput = $true
    $processStartInfo.UseShellExecute = $false
    $processStartInfo.CreateNoWindow = $true

    $process = New-Object System.Diagnostics.Process
    $process.StartInfo = $processStartInfo
    $process.Start() | Out-Null

    # Hier die Ausgabe des Prozesses lesen
    while (!$process.StandardOutput.EndOfStream) {
        $line = $process.StandardOutput.ReadLine()
        try {
            if ($line -match '{.*}') {
                $jsonObject = $line | ConvertFrom-Json
                if ($jsonObject.message -notlike '*X-B3-TraceId was null*') {
                    $timestamp = [datetimeoffset]::FromUnixTimeSeconds($jsonObject.instant.epochSecond).DateTime.ToString("HH:mm:ss")
                    $loggerName = Get-LoggerName -loggerName $jsonObject.loggerName
                    $logLevel = $jsonObject.level

                    # Filter anwenden
                    if (($filterLogLevel -and $logLevel.ToLower() -ne $filterLogLevel.ToLower()) -or ($filterLoggerName -and $loggerName -notlike "*$filterLoggerName*")) {
                        continue
                    }

                    Write-Output "$timestamp [$logLevel | $loggerName] - $($jsonObject.message)"
                }
            }
        } catch {
            # Fehler abfangen und die problematische Zeile loggen
            Write-Host "Fehler beim Parsen der Zeile: $line" -ForegroundColor Yellow
            Write-Host "Fehlerdetails: $_" -ForegroundColor Red
        }
    }

    # Zum Stoppen des Prozesses (zum Beispiel bei Bedarf):
    # $process.CloseMainWindow()
    $process.WaitForExit()
}

# Hauptlogik
if (-not $Pod) {
    Write-Error "Bitte geben Sie den Namen des Pods mit dem Parameter -Pod an."
    exit 1
}

# Logs abrufen
Get-Openshift-Logs -pod $Pod -filterLogLevel $FilterLogLevel -filterLoggerName $FilterLoggerName
