*mydev.txt*     Development and Design                  Last change: 2012-07-09

=============================================================================
MY COLLECTION FOR DEVELOPMENT           *mydev-my-collection-for-development*


=============================================================================
CREATIONAL DESIGN PATTERNS                                  *mydev-creational*

This design patterns is all about class instantiation. This pattern can be
further divided into class-creation patterns and object-creational patterns.
While class-creation patterns use inheritance effectively in the instantiation
process, object-creation patterns use delegation effectively to get
the job done.

ABSTRACT FACTORY                                     *mydev-abstract-factory*
----------------

Creates an instance of several families of classes

Definition:~

The essence of the Abstract Factory method Pattern is to "Provide an interface
for creating families of related or dependent objects without specifying their
concrete classes".


UML:~
                                                   +--------+
                            -----------------------| Client |---------------+
                            v                      +--------+               |
           +------------------+                                             |
           | AbstractFactory  |                   +------------------+      |
           +------------------+                   | AbstractProductA |<-----+
           | CreateProductA() |                   +------------------+      |
           | CreateProductB() |                            △                |
           +------------------+                            |                |
                    △                             +------------------+      |
                    |                             |                  |      |
         +----------------------+            +-----------+  +-----------+   |
         |                      |            | ProductA2 |  | ProductA1 |<. |
+------------------+   +------------------+  +-----------+  +-----------+ . |
| ConcreteFactory1 |   | ConcreteFactory2 |    ^                          . |
+------------------+   +------------------+    .                          . |
| CreateProductA() |   | CreateProductA() |.....                          . |
| CreateProductB() |   | CreateProductB() |    .  +------------------+    . |
+------------------+   +------------------+    .  | AbstractProductA |<-----+
                .                              .  +------------------+    .
                .                              .           △              .
                .                              .           |              .
                .                              .  +------------------+    .
                .                              v  |                  |    .
                .                            +-----------+  +-----------+ .
                .                            | ProductA2 |  | ProductA1 |<.
                .                            +-----------+  +-----------+ .
                .                                                         .
                ...........................................................

AbstractFactory~
Declares an interface for operations that create abstract product objects.

ConcreteFactory~
Implements the operations to create concrete product objects.

AbstractProduct~
Declares an interface for a type of product object.

ConcreteProduct~
Defines a product object to be created by the corresponding concrete factory.
Implements the AbstractProduct interface.

Client~
Uses only interfaces declared by AbstractFactory and AbstractProduct classes.


BUILDER                                                       *mydev-builder*
-------

Separates object construction from its representation

Definition:~

The intent of the Builder design pattern is to separate the construction of a
complex object from its representation. By doing so, the same construction
process can create different representations.


UML:~

  +--------------+ builder                +--------------+
  | Director     |<>----------------------+ Builder      |
  +==============+                        +==============+
  | +construct() |..                      | +buildPart() |
  +--------------+ .                      +--------------+
                   .                             △
                   .                             |
  +---------------------------\                  |
  | foreach item in structure |                  |
  |   builder->buildPart()    |      +-----------------------+
  +---------------------------+      | ConcreteBuilder       |  <<create>>
                                     +=======================+   +----------+
                                     | +buildPart()          |..>+  Product |
                                     | +getResult(): Product |   +----------+
                                     +-----------------------+


Builder~

Abstract interface for creating objects (product).

Concrete Builder~

Provides implementation for Builder. It is an object able to construct
other objects. Constructs and assembles parts to build the objects.

Director~
The Director class is responsible for managing the correct sequence of
object creation. It receives a Concrete Builder as a parameter and executes
the necessary operations on it.

Product~
The final object that will be created by the Director using Builder. 


FACTORY METHOD                                         *mydev-factory-method*
--------------

Creates an instance of several derived classes

Definition:~

The essence of the Factory method Pattern is to "Define an interface for
creating an object, but let the classes that implement the interface decide
which class to instantiate. The Factory method lets a class defer instantiation
to subclasses."


UML:~
                     +-----------------------+
    +---------+      | Creator               |
    | Product |      +-----------------------|    +--------------------------\
    +---------+      | FactoryMethod() {abs} |    | ...                      |
         △           | AnOperation()        o-----| product= FactoryMethod() |
         |           +-----------------------+    | ...                      |
         |                       △                +--------------------------|
         |                       |
+-----------------+     +------------------+
| ConcreteProduct |<----+ ConcreteCreator  |
+-----------------+     +------------------+    +----------------------------\
                        | FactoryMethod() o-----| return new ConcreteProduct |
                        +------------------+    +----------------------------+


Participants:~

Product~
Defines the interface of objects the factory method creates.

ConcreteProduct~
Implements the Product interface.

Creator~
Declares the factory method, which returns an object of type Product.
  Creator may also define a default implementation of the factory
  method that returns a default ConcreteProduct object.
May call the factory method to create a Product object.

ConcreteCreator~
Overrides the factory method to return an instance of a ConcreteProduct.


OBJECT POOL                                               *mydev-object-pool*
-----------

Avoid expensive acquisition and release of resources by recycling objects
that are no longer in use

PROTOTYPE                                                   *mydev-prototype*
---------

A fully initialized instance to be copied or cloned

SINGLETON                                                   *mydev-singleton*
---------

A class of which only a single instance can exist


=============================================================================
STRUCTURAL DESIGN PATTERNS                 *mydev-structural-design-patterns*

This design patterns is all about Class and Object composition.
Structural class-creation patterns use inheritance to compose interfaces.
Structural object-patterns define ways to compose objects to obtain
new functionality.


ADAPTER                                                       *mydev-adapter*
-------

Match interfaces of different classes

BRIDGE                                                         *mydev-bridge*
------

Separates an object’s interface from its implementation

COMPOSITE                                                   *mydev-composite*
---------

A tree structure of simple and composite objects

UML:~

     +--------+
     | Client |
     +--------+
         |
         v
       +-------------------+
       | Component         |*<--------------------+
       +-------------------+                      |
       | Operation()       |                      |
       | Add(Component)    |                      |
       | Remove(Component) |                      |
       | GetChild(int)     |                      |
       +-------------------+                      |
                △                                 |
                |                                 |
      +---------+-----------+                     |
      |                     |                     |
+-------------+   +-------------------+  children |
| Leaf        |   | Composite         |<>---------+
+-------------+   +-------------------+              +----------------------\
| Operation() |   | Operation()      o---------------| forall g in children |
+-------------+   | Add(Component)    |              |   g.Operation();     |
                  | Remove(Component) |              +----------------------+
                  | GetChild(int)     |
                  +-------------------+

Component~
Declares the interface for objects in the composition.
Implements default behavior for the interface common to all classes,
  as appropriate.
Reclares an interface for accessing and managing its child components.
(optional) Defines an interface for accessing ac omponent's parent in the
  recursive structure, and implements it if that's appropriate.

Leaf~
Represents leaf objects in the composition. A leaf has no children.
Defines behavior for primitive objects in the composition.

Composite~
Defines behavior for components having children.
Stores child components.
Implements child-related operations in the Component interface.

Client~
Manipulates objects in the composition through the Component interface.


DECORATOR                                                   *mydev-decorator*
---------

Add responsibilities to objects dynamically

FACADE                                                         *mydev-facade*
------

A single class that represents an entire subsystem

FLYWEIGHT                                                   *mydev-flyweight*
---------

A fine-grained instance used for efficient sharing

PRIVATE CLASS DATA                                 *mydev-private-class-data*
------------------

Restricts accessor/mutator access

PROXY                                                           *mydev-proxy*
-----

An object representing another object


=============================================================================
BEHAVIORAL DESIGN PATTERNS                 *mydev-behavioral-design-patterns*

This design patterns is all about Class's objects communication. Behavioral
patterns are those patterns that are most specifically concerned with
communication between objects.


CHAIN OF RESPONSIBILITY                       *mydev-chain-of-responsibility*
-----------------------

A way of passing a request between a chain of objects


COMMAND                                                       *mydev-command*
-------

Encapsulate a command request as an object

INTERPRETER                                               *mydev-interpreter*
-----------

A way to include language elements in a program

ITERATOR                                                     *mydev-iterator*
--------

Sequentially access the elements of a collection

MEDIATOR                                                     *mydev-mediator*
--------

Defines simplified communication between classes

Definition:~

The essence of the Mediator Pattern is to "Define an object that encapsulates
how a set of objects interact. Mediator promotes loose coupling by keeping
objects from referring to each other explicitly, and it lets you vary their
interaction independently."


UML:~

 +------------+                       +-------------+
 |  Mediator  |                       |  Colleague  |
 +------------+                       +-------------+
        △                                    △
        |                                    |
        |                         +---------------------+
        |                         |                     |
 +------------------+  +--------------------+ +--------------------+
 | ConcreteMediator |  | ConcreteColleagueA | | ConcreteColleagueB |
 +------------------+  +--------------------+ +--------------------+
         |        |              ^                      ^
         |        +--------------+                      |
         |                                              |
         +----------------------------------------------+


MEMENTO                                                       *mydev-memento*
-------

Capture and restore an object's internal state

NULL OBJECT                                               *mydev-null-object*
-----------

Designed to act as a default value of an object

OBSERVER                                                     *mydev-observer*
--------

A way of notifying change to a number of classes

Definition:~

The essence of the Observer Pattern is to "Define a one-to-many dependency
between objects so that when one object changes state, all its dependents
are notified and updated automatically."

UML:~

  +-------------------+ observers               +------------+
  |  Subject          |----------------------->*|  Observer  |
  +-------------------+                         +============+
  | +attach(observer) |                         | +update()  |
  | +detach(observer) |                         +------------+
  | +notify()         |...                             △
  +-------------------+  .                             |
       △                 .                             |
       |     +--------------------------\              |
       |     |notify()                  |              |
       |     | for all o in obsevers    |              |
       |     |   o->observer->update()  |              |
       |     +--------------------------+              |
       |                                               |
       |                                     +-------------------+
  +---------------------+                    | ConcreteObserver  |
  | ConcreteSubject     |            subject +===================+
  +---------------------+<-------------------| +update()         |...
  | -subjectSate        |                    +-------------------+  .
  +---------------------+                    | observerState     |  .
  | +getState(observer) |...                 +-------------------+  .
  | +setState(observer) |  .                                        .
  +---------------------+  .                    +-----------------------\
                           .                    | observerState=        |
           +---------------------\              |   subject->getState() |
           | return subjectState |              +-----------------------+
           +---------------------+

Subject~
Keeps track of its observers.
Provides an interface for attaching and detaching Observer objects.

Observer~
Defines an interface for update notification.

ConcreteSubject~
The object being observed.
Stores state of interest to ConcreteObserver objects.
Sends a notification to its observers when its state changes.

ConcreteObserver~
The observing object.
Stores state that should stay consistent with the subject's.
Implements the Observer update interface to keep its state consistent
with the subject's.


STATE                                                           *mydev-state*
-----

Alter an object's behavior when its state changes

STRATEGY                                                     *mydev-strategy*
--------

Encapsulates an algorithm inside a class

TEMPLATE METHOD                                       *mydev-template-method*
---------------

Defer the exact steps of an algorithm to a subclass

VISITOR                                                       *mydev-visitor*
-------

Defines a new operation to a class without change



==============================================================================

vim:tw=78:ts=8:ft=help:norl:fen:fdl=0:fdm=marker:
