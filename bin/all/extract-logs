#!/usr/bin/env pwsh

param (
    [string]$InputFile,
    [string]$OutputFile
)

# Funktion zum Kürzen des Loggernamens
function Shorten-LoggerName($loggerName) {
    $parts = $loggerName -split '\.'
    $shortened = ($parts[0..($parts.Length - 2)] | ForEach-Object { $_.Substring(0, 1) }) -join '.'
    return "$shortened.$($parts[-1])"
}

# Ergebnisse speichern
$results = @()

# Eingabe lesen (entweder aus Datei oder stdin)
if ($InputFile) {
    if (-not (Test-Path $InputFile)) {
        Write-Error "Die Eingabedatei '$InputFile' wurde nicht gefunden."
        exit 1
    }

    # Datei zeilenweise lesen
    $reader = [System.IO.StreamReader]::new($InputFile)
    try {
        while (($line = $reader.ReadLine()) -ne $null) {
            try {
                # JSON-Daten parsen
                $json = $line | ConvertFrom-Json

                # LoggerName, LogLevel und Message extrahieren
                $loggerName = $json.loggerName
                $level = $json.level
                $message = $json.message

                # LoggerName kürzen
                if ($loggerName) {
                    $loggerName = Shorten-LoggerName $loggerName
                }

                if ($message) {
                    $results += "[${level} | ${loggerName}] $message"
                }
            } catch {
                # Fehler beim Parsen ignorieren
                Write-Host "Fehler beim Parsen der Zeile: $line" -ForegroundColor Yellow
            }
        }
    } finally {
        $reader.Close()
    }
} else {
    # Lesen von stdin
    while ($line = [Console]::In.ReadLine()) {
        try {
            # JSON-Daten parsen
            $json = $line | ConvertFrom-Json

            # LoggerName, LogLevel und Message extrahieren
            $loggerName = $json.loggerName
            $level = $json.level
            $message = $json.message

            # LoggerName kürzen
            if ($loggerName) {
                $loggerName = Shorten-LoggerName $loggerName
            }

            if ($message) {
                $results += "[${level} | ${loggerName}] $message"
            }
        } catch {
            # Fehler beim Parsen ignorieren
            Write-Host "Fehler beim Parsen der Zeile: $line" -ForegroundColor Yellow
        }
    }
}

# Ergebnisse ausgeben oder in eine Datei schreiben
if ($OutputFile) {
    $results | Out-File -FilePath $OutputFile -Encoding UTF8
} else {
    $results | ForEach-Object { Write-Output $_ }
}
