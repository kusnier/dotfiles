snippet xphead "xphead"
/* This class is part of the XP framework
 *
 * $Id:$
 */
  
endsnippet

snippet with "xp with"
with ($${1:value}= ${2:test}); {
  $${1}->${3:method};
}
endsnippet

snippet xpclass "xp class"
/**
 * ${1}
 *
 * @purpose  (Add purpose)
 * @test     xp://path.to.$2Test
 */
class ${2:ClassName} extends ${3:Object} {
  /**
   * Constructor
   *
   * @param   ${4:string} ${5:argument}
   */
  public function ${6:__construct}(\$$5) {
    ${7:// code...}
  }
}
endsnippet

snippet xpcmd "xp command"
/**
 * ${1}
 */
class ${2:ClassName} extends Command {
  protected 
    $verbose = FALSE;

  /**
   * Set verbose mode
   *
   */
  #[@arg]
  public function setVerbose() {
    $this->verbose= TRUE;
  }

  /**
   * Runs this object
   *
   */
  public function run() {
    ${3:// code...}
  }
}
endsnippet

snippet xpget "xp getter"
/**
 * Get $1
 *
 * @return ${2:type}
 */
public function get${1:Name}() {
  return $this->${1/./\l$0/};
}
endsnippet

snippet xpset "xp setter"
/**
 * Set $1
 *
 * @param ${2:type} ${1/./\l$0/}
 */
public function set${1:Name}($${1/./\l$0/}) {
  $this->${1/./\l$0/}= $${1/./\l$0/};
}
endsnippet

snippet xpsetget "xp setter and getter"
/**
 * Set $1
 *
 * @param ${2:type} ${1/./\l$0/}
 */
public function set${1:Name}($${1/./\l$0/}) {
  $this->${1/./\l$0/}= $${1/./\l$0/};
}

/**
 * Get $1
 *
 * @return $2
 */
public function get$1() {
  return $this->${1/./\l$0/};
}
endsnippet

snippet xpargn "xp command class argument"
/**
 * ${1:text}
 *
 * @param   ${2:type} ${3:name}
 */
#[@arg(name= '$3', short= '${4:short}')]
public function set${3/./\u$0/}($$3) {
  $this->$3= $$3;
}
endsnippet

snippet xpcmdinj "xp command class injection"
/**
 * Injection
 *
 * @param   rdbms.DBConnection $1
 */
#[@inject(type= 'rdbms.DBConnection', name= '${1:name}')]
public function set${1/./\u$0/}($$1) {
  $$1->connect();
  $this->$1= $$1;
}
endsnippet

snippet xpwl "xp writeLine"
$this->${1:out}->writeLine(${3:text});
endsnippet

snippet xpwl "xp writeLinef"
$this->${1:out}->writeLinef(${3:text}, ${4:value});
endsnippet

snippet xpunittest "xp unittest class"
uses(
  'unittest.TestCase',
  '${1:path.to.testing.class}'
);

/**
 * ${2:Description}
 *
 * @purpose  unittest
 * @see      xp://$1
 */
class ${2:TestName} extends TestCase {

  /**
   * Set up this test
   *
   */
  public function setUp() {
    ${3:// Enter code here or delete this function}
  }

  /**
   * Tear down the this test case.
   * 
   */
  public function tearDown() {
    ${4:// Enter code here or delete this function}
  }
  ${5}
}
endsnippet

snippet xplog "xp log (debug)"
$log= Logger::getInstance();
$cat= $log->getCategory('default');
$cat->warn(${1:value});
endsnippet

snippet vdoc "@var <variable> <class>"
/* @var $${1:name} ${2:ClassName} */
endsnippet

snippet vd "var_dump"
var_dump(${1:value});
endsnippet

snippet cpid
$context->getPersonId()
endsnippet
